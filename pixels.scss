@use 'sass:map';
@use 'sass:list';

// Used for animations
@use 'sass:string';
@use 'sass:math';

$pixelSize: 10px;
$pixelMap: (
    (0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0)
    (0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0)
    (0 0 0 2 2 2 3 3 2 3 3 0 0 0 0 0)
    (0 0 2 3 2 3 3 3 2 3 3 3 3 0 0 0)
    (0 0 2 3 2 2 3 3 3 2 3 3 3 3 0 0)
    (0 0 2 2 3 3 3 3 2 2 2 2 2 0 0 0)
    (0 0 0 0 3 3 3 3 3 3 3 3 0 0 0 0)
    (0 0 0 2 2 1 2 2 2 2 2 0 0 0 0 0)
    (0 0 2 2 2 1 2 2 1 2 2 2 0 0 0 0)
    (0 2 2 2 2 1 1 1 1 2 2 2 2 0 0 0)
    (0 3 3 2 1 3 1 1 3 1 2 3 3 0 0 0)
    (0 3 3 3 1 1 1 1 1 1 3 3 3 0 0 0)
    (0 3 3 1 1 1 1 1 1 1 1 3 3 0 0 0)
    (0 0 0 1 1 1 1 0 1 1 1 1 0 0 0 0)
    (0 0 2 2 2 2 0 0 0 2 2 2 2 0 0 0)
    (0 2 2 2 2 2 0 0 0 2 2 2 2 2 0 0)
);
$colorMap: (
    0: transparent,
    1: #FF0000,
    2: #AC7C00,
    3: #FFA440
);

$frames: (
    0: (
        (0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0)
        (0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0)
        (0 0 0 0 2 2 2 3 3 2 3 3 0 0 0 0)
        (0 0 0 2 3 2 3 3 3 2 3 3 3 3 0 0)
        (0 0 0 2 3 2 2 3 3 3 2 3 3 3 3 0)
        (0 0 0 2 2 3 3 3 3 2 2 2 2 2 0 0)
        (0 0 0 0 0 3 3 3 3 3 3 3 3 0 0 0)
        (0 0 0 0 2 2 2 2 1 2 2 3 3 0 0 0)
        (0 0 0 3 2 2 2 2 2 2 3 3 3 3 0 0)
        (0 0 3 3 1 2 2 2 2 2 3 3 3 0 0 0)
        (0 0 2 2 1 1 1 1 1 1 1 1 0 0 0 0)
        (0 0 2 1 1 1 1 1 1 1 1 1 0 0 0 0)
        (0 2 2 1 1 1 1 1 1 1 1 0 0 0 0 0)
        (0 2 2 0 0 0 2 2 2 2 0 0 0 0 0 0)
        (0 0 0 0 0 0 2 2 2 2 2 0 0 0 0 0)
        (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    ),
    1: (
        (0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0)
        (0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0)
        (0 0 0 0 2 2 2 3 3 2 3 3 0 0 0 0)
        (0 0 0 2 3 2 3 3 3 2 3 3 3 3 0 0)
        (0 0 0 2 3 2 2 3 3 3 2 3 3 3 3 0)
        (0 0 0 2 2 3 3 3 3 2 2 2 2 2 0 0)
        (0 0 0 0 0 3 3 3 3 3 3 3 3 0 0 0)
        (0 0 0 2 2 1 2 2 2 2 0 0 0 0 0 0)
        (0 0 2 2 2 2 1 1 2 2 2 0 0 0 0 0)
        (0 0 2 2 2 1 1 3 1 1 3 3 0 0 0 0)
        (0 0 2 2 2 2 1 1 1 1 1 1 0 0 0 0)
        (0 0 1 2 2 3 3 3 1 1 1 1 0 0 0 0)
        (0 0 0 1 2 3 3 1 1 1 1 0 0 0 0 0)
        (0 0 0 0 1 1 1 2 2 2 2 0 0 0 0 0)
        (0 0 0 0 2 2 2 2 2 2 2 2 0 0 0 0)
        (0 0 0 0 2 2 2 2 2 0 0 0 0 0 0 0)
    ),
    2: (
        (0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0)
        (0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0)
        (0 0 0 0 2 2 2 3 3 2 3 3 0 0 0 0)
        (0 0 0 2 3 2 3 3 3 2 3 3 3 3 0 0)
        (0 0 0 2 3 2 2 3 3 3 2 3 3 3 3 0)
        (0 0 0 2 2 3 3 3 3 2 2 2 2 2 0 0)
        (0 0 0 0 0 3 3 3 3 3 3 3 3 0 0 0)
        (0 0 2 2 2 2 1 1 2 2 2 0 0 0 0 0)
        (3 3 2 2 2 2 1 1 1 2 2 2 3 3 3 3)
        (3 3 3 3 2 2 1 3 1 1 1 2 2 3 3 3)
        (3 3 3 0 1 1 1 1 1 1 1 1 0 2 2 0)
        (0 0 0 1 1 1 1 1 1 1 1 1 2 2 2 0)
        (0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 0)
        (0 2 2 1 1 1 1 0 0 1 1 1 2 2 2 0)
        (0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0)
        (0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0)
    )
);
$fps: 5;

@mixin pixel-art($size, $map, $colors) {
    $shadow: null;
    $i: 1;
    $j: 1;
    $translateX: 0;
    $translateY: -(list.length($map) * $size) / 2;

    @each $list in $map {
        @each $pixel in $list {
            $x: $i * $size;
            $y: $j * $size;
            $color: map.get($colors, $pixel);

            $shadow: $shadow + #{' '} // Original value + empty whitespace
                + $x + #{' '} + $y    // New x,y coordinates
                + #{' '} + $color;    // Plus the color


            // Only separate them by commas if its not the last element
            @if not ($i == list.length($list) and $j == list.length($map)) {
                $shadow: $shadow + #{','};
            }

            @if ($translateX == 0) {
                $translateX: -(list.length($list) * $size) / 2;
            }

            $i: $i + 1;
        }

        $i: 1;
        $j: $j + 1;
    }

    display: block;
    width: $size;
    height: $size;
    box-shadow: $shadow;
    transform: translate($translateX, $translateY);
}

@mixin animate-pixel-art($size, $frames, $colors, $fps) {
    $shadows: ();
    $shadow: null;
    $i: 1;
    $j: 1;
    $translateX: 0;
    $translateY: 0;

    $frameIndex: 0;
    $numberOfFrames: list.length($frames);
    $stepAmount: (100 / $numberOfFrames) * 1%;
    $animation-name: string.unique-id();

    @each $index, $frame in $frames {
        $frame: map.get($frames, $index);

        @each $list in $frame {
            @each $pixel in $list {
                $x: $i * $size;
                $y: $j * $size;
                $color: map.get($colors, $pixel);
    
                $shadow: $shadow + #{' '} // Original value + empty whitespace
                    + $x + #{' '} + $y    // New x,y coordinates
                    + #{' '} + $color;    // Plus the color
    
    
                // Only separate them by commas if its not the last element
                @if not ($i == list.length($list) and $j == list.length($frame)) {
                    $shadow: $shadow + #{','};
                }
    
                @if ($translateX == 0 and $translateY == 0) {
                    $translateX: -(list.length($list) * $size) / 2;
                    $translateY: -(list.length($frame) * $size) / 2;
                }
    
                $i: $i + 1;
            }

            $i: 1;
            $j: $j + 1;
        }

        $j: 1;
        $shadows: map.set($shadows, $frameIndex, $shadow);
        $shadow: null;
        $frameIndex: $frameIndex + 1;
    }

    @keyframes #{$animation-name} {
        @for $i from 1 through $numberOfFrames {
            #{math.round($stepAmount * $i)} {
                box-shadow: map.get($shadows, $i - 1);
            }
        }
    }

    display: block;
    width: $size;
    height: $size;
    box-shadow: map.get($shadows, 0);
    transform: translate($translateX, $translateY);

    animation-name: $animation-name;
    animation-duration: 1000 / $fps + #{ms};
    animation-iteration-count: infinite;
    animation-timing-function: linear;
}

body {
    margin: 0;
    background: #000;
}

#mario {
    position: absolute;
    top: 50%;
    left: 50%;
    border-radius: 100%;
    @include pixel-art($pixelSize, $pixelMap, $colorMap);
    // @include animate-pixel-art($pixelSize, $frames, $colorMap, $fps);
}